package com.gordey9992.russiancinematic.managers;

import com.gordey9992.russiancinematic.RussianCinematic;
import org.bukkit.entity.Player;
import org.bukkit.configuration.file.FileConfiguration;

import java.util.*;
import java.util.logging.Logger;

public class CinematicManager {
    
    private final RussianCinematic plugin;
    private final Logger logger;
    private final FileConfiguration config;
    
    private boolean enabled;
    private boolean autoSceneForNewPlayers;
    private String defaultCutscene;
    private Map<UUID, String> activeCutscenes;
    
    public CinematicManager(RussianCinematic plugin) {
        this.plugin = plugin;
        this.logger = plugin.getLogger();
        this.config = plugin.getConfig();
        this.activeCutscenes = new HashMap<>();
        
        loadConfig();
    }
    
    private void loadConfig() {
        enabled = config.getBoolean("cinematic.enabled", true);
        autoSceneForNewPlayers = config.getBoolean("cinematic.auto-scene-for-new-players", true);
        defaultCutscene = config.getString("cinematic.default-cutscene", "welcome");
    }
    
    public void startCutscene(Player player, String cutsceneName) {
        if (!enabled) return;
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        blockPlayerControl(player);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Ç—Å—Ü–µ–Ω—É (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç)
        activeCutscenes.put(player.getUniqueId(), cutsceneName);
        
        logger.info("üé≠ –ó–∞–ø—É—â–µ–Ω–∞ –∫–∞—Ç—Å—Ü–µ–Ω–∞ '" + cutsceneName + "' –¥–ª—è –∏–≥—Ä–æ–∫–∞ " + player.getName());
    }
    
    public void stopCutscene(Player player) {
        String cutsceneName = activeCutscenes.remove(player.getUniqueId());
        if (cutsceneName != null) {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            unblockPlayerControl(player);
            logger.info("üé≠ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç—Å—Ü–µ–Ω–∞ '" + cutsceneName + "' –¥–ª—è –∏–≥—Ä–æ–∫–∞ " + player.getName());
        }
    }
    
    public void startAutoCutscene(Player player) {
        if (autoSceneForNewPlayers && !hasPlayedCutscene(player)) {
            startCutscene(player, defaultCutscene);
            markCutsceneAsPlayed(player);
        }
    }
    
    private void blockPlayerControl(Player player) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        player.setWalkSpeed(0);
        player.setFlySpeed(0);
        player.setInvulnerable(true);
    }
    
    private void unblockPlayerControl(Player player) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        player.setWalkSpeed(0.2f);
        player.setFlySpeed(0.1f);
        player.setInvulnerable(false);
    }
    
    private boolean hasPlayedCutscene(Player player) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –∫–∞—Ç—Å—Ü–µ–Ω—É
        // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –ë–î
        return false;
    }
    
    private void markCutsceneAsPlayed(Player player) {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ç—Å—Ü–µ–Ω—É –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é
    }
    
    public boolean isInCutscene(Player player) {
        return activeCutscenes.containsKey(player.getUniqueId());
    }
    
    public boolean isEnabled() {
        return enabled;
    }
}
